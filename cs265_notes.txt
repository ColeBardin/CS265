CS265 Notes
June 21st, 2022

LAB DIRECTORY: 
tux:~kschmidt/public_html/CS265/Labs/Unix

Bash scripting in command-line interface

Objectives:
	use linux commands to traverse filesytems
	write shell scripts to aid development
	write non-trivial C programs
	effectively use pointers in C
	use C memory management
	use Make utility to manage build
	use debugger


TUX serves environment
ssh cab572@tux.cs.drexe.edu


many 'flavors' of UNIX


POSIX:
	IEEE Portable Operatix System based on Unix

SUS (Single Unix Specification):
	by the Open Group
	they certify unix distributions
	once certified, it can be called 'All Capital'
	MacOS is certified but Linux is not


Unix unix or UNIX

Unix:	family of OS that includes UNIX operating systems or UNIX like
UNIX operating systems:		OS that have been certifed (MacOS)
Unix-Like Operating systems:	OS that have not been certified (GNU, Linux)



OS Primary Features:
Abstraction:
	provides execution environment for program and use system resources through unified interface regardless of hardware

Isolation:
	execution of program doesn't interfere with execution of other programs, and they can occur concurrently

Security:
	applies security policy that controls coordinates access to system resources so programmers cannot break abstraction or isolation requirements



POSIX Compliance for command line arguments:
must include - or -- before argument and be separated with whitespace from command


non-option arguments are data passed to the command


`tar xvf file` is not POSIX compliant but it runs (tar is for take archive)

`tail -f -n30 error.log`
tail displays end of file
f (follow) updates when file is updated
n30 displays last 30 lines



Quotes:
ls a*t is different from ls 'a*t'

Double Quotes:
can protect special characters but $,\,`..` will still be interpreted


stat shows all metadeta of file
ls -ot displays all files in order of last modification time


displays all files in subdirs of ~ of type f with .txt ext then lists it with their number of lines
find ~/ -type f -name '*.txt' | xargs wc -l


ps to show current processes
options:
blank: displays all user processes
-e lists all processes in the system
-f uses full format listing


run process in background:
cmd &
ls &
runs program without disabling shell for runtime



SIGNALS in UNIX environment
predefined asynch messages sent to a running program to trigger a specific behavior
similar to INTERRUPTS but insted of being handled by kernel, they're handled by process

very limited form of IPC (inter process communication)
common signals are: interrupt, suspend, terminate

User generated signals:
SIGSTOP (pause)
SIGKILL (terminate) CTRL-C


kill command:
kill PID ex. 

kill 29940
kill -s 15 29940
kill -15 29940
kill -SIGTERM 29940
all do the same thing
it's possible process may ignore them
how to force it:
kill -9 29940
kill -s 9 29940
kill -SIGKILL 29940
kill -KILL 29940
process CANNOT ignore this kill signal

CTRL-C (terminates process, SIGTERM)
CTRL-Z (pauses process, SIGSTP)
CTRL-D (sends EOF marker)




after pausing a process:
^Z suspends process in foreground
fg brings most recent process to the foreground

./sample
^Z 
[1]+ Stopped 	./sample

fg brings most recent process back
or fg %1 to bring back process with ID of 1 back



